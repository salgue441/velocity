# Velocity Gateway - Development Docker Compose
version: "3.8"

services:
  # Main Velocity Gateway service
  velocity:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        VERSION: dev
        BUILD_TIME: ${BUILD_TIME:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}
        GIT_COMMIT: ${GIT_COMMIT:-dev}
        GIT_BRANCH: ${GIT_BRANCH:-dev}
    ports:
      - "8080:8080"
    environment:
      - VELOCITY_LOGGING_LEVEL=debug
      - VELOCITY_LOGGING_FORMAT=text
    volumes:
      - ./configs:/configs:ro
    depends_on:
      - backend1
      - backend2
      - redis
      - postgres
    networks:
      - velocity-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/velocity", "-health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Test backend services
  backend1:
    image: kennethreitz/httpbin
    ports:
      - "3001:80"
    networks:
      - velocity-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend2:
    image: nginx:alpine
    ports:
      - "3002:80"
    volumes:
      - ./test-content:/usr/share/nginx/html:ro
    networks:
      - velocity-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alternative backend for testing
  echo-server:
    image: ealen/echo-server
    ports:
      - "3003:80"
    environment:
      - PORT=80
    networks:
      - velocity-net

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - velocity-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for configuration storage
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=velocity
      - POSTGRES_USER=velocity
      - POSTGRES_PASSWORD=velocity_dev_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - velocity-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U velocity"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - velocity-net
    depends_on:
      - velocity

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - velocity-net
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - velocity-net

  # Load testing with k6
  k6:
    image: grafana/k6:latest
    profiles:
      - testing
    volumes:
      - ./tests/load:/scripts:ro
    networks:
      - velocity-net
    depends_on:
      - velocity
    command: run /scripts/basic-load-test.js

networks:
  velocity-net:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
# Additional compose files for different environments
# Use with: docker-compose -f docker-compose.yml -f docker-compose.override.yml up
